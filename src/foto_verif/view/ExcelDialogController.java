package foto_verif.view;import foto_verif.model.*;import foto_verif.model.apache_poi.ApachePoi;import foto_verif.model.apache_poi.ApachePoiManager;import foto_verif.util.DateUtil;import foto_verif.util.Logger;import foto_verif.view.NKA.NkaAddress;import foto_verif.view.NKA.NkaContainer;import foto_verif.view.dmp.DmpAddress;import foto_verif.view.dmp.DmpContainer;import foto_verif.view.dmp.DmpDescr;import foto_verif.view.lka.LkaAddress;import foto_verif.view.lka.LkaContainer;import foto_verif.view.nst.NstAddress;import foto_verif.view.nst.NstContainer;import foto_verif.view.nst.NstPhoto;import javafx.collections.FXCollections;import javafx.concurrent.Task;import javafx.fxml.FXML;import javafx.scene.control.ChoiceBox;import javafx.scene.control.DatePicker;import javafx.scene.control.Label;import javafx.scene.control.ProgressBar;import javafx.stage.DirectoryChooser;import javafx.stage.Stage;import javax.xml.bind.JAXBContext;import javax.xml.bind.JAXBException;import javax.xml.bind.Unmarshaller;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.util.*;import java.util.stream.Collectors;/** * Created by market6 on 10.10.2016. */public class ExcelDialogController {    @FXML    private DatePicker dateFrom;    @FXML    private DatePicker dateTo;    @FXML    private ChoiceBox<String> channelChoice;    @FXML    private Label errorLabel;    @FXML    private ProgressBar progressBar;    private RootLayoutController1 rootLayoutController;    private Stage dialogStage;    private String reportPath;    public void setDialogStage(Stage dialogStage) {        this.dialogStage = dialogStage;    }    public ExcelDialogController() {    }    public void setRootLayoutController(RootLayoutController1 rootLayoutController) {        this.rootLayoutController = rootLayoutController;    }    @FXML    private void initialize() {        channelChoice.setItems(FXCollections.observableArrayList("1. Локал. сети: ДМП", "2. Федер сети: фотоотчеты MLKA", "3. Федер. сети: ДМП",                "4. Фото НСТ", "5. Локальные сети"));    }    public void setStartValues() {        if (rootLayoutController.getDateFromSelected() != null)            dateFrom.setValue(rootLayoutController.getDateFromSelected());        if (rootLayoutController.getDateToSelected() != null) dateTo.setValue(rootLayoutController.getDateToSelected());        if (rootLayoutController.getPhotoTypeSelected() != -1)            channelChoice.getSelectionModel().select(rootLayoutController.getPhotoTypeSelected());    }    @FXML    private void cancelHandler() {        dialogStage.close();    }    @FXML    private void makeExcelReport() {        String sDateFrom = DateUtil.format(dateFrom.getValue());        String sDateTo = DateUtil.format(dateTo.getValue());        String channelSel = channelChoice.getValue();        if (sDateFrom == null || sDateTo == null) {            errorLabel.setText("Выберите даты...");            return;        }        if (channelSel == null) {            errorLabel.setText("Выберите тип отчета");            return;        }        errorLabel.setText("");        DirectoryChooser directoryChooser = new DirectoryChooser();        directoryChooser.setInitialDirectory(new File("."));        directoryChooser.setTitle("Сохранить отчет в...");        File selectedDirectory = directoryChooser.showDialog(dialogStage);        if (selectedDirectory == null) {            errorLabel.setText("Не выбрана директория для отчета");            return;        } else {            errorLabel.setText("");        }        reportPath = selectedDirectory.getAbsolutePath();        ArrayList<String> listFiles = new ArrayList<>();        ArrayList<String> listFiles1 = new ArrayList<>();        Set<String> mlkaSet = new TreeSet();        Set<String> mlkaSet1 = new TreeSet<>();        Map<String, ArrayList<String>> netMap = new HashMap<>();        switch (channelChoice.getSelectionModel().getSelectedIndex()) {            case 0:                listFiles.addAll(Arrays.asList(new File("save/LKA_DMP/" + sDateFrom + "-" + sDateTo).listFiles()).stream()                    .filter(file -> file.getName().endsWith(".dat"))                    .map(file -> file.getAbsolutePath())                    .collect(Collectors.toList()));                //listFiles.addAll(recursiveCountFiles(new File("save/0/LKA/" + sDateFrom + "-" + sDateTo + "/")));                netMap.put("LKA", listFiles);                break;            case 1:                File x5Dir = new File("save/NKA/X5/" + sDateFrom + "-" + sDateTo);                if (x5Dir.exists()) {                    listFiles.addAll(Arrays.asList(new File("save/NKA/X5/" + sDateFrom + "-" + sDateTo).listFiles()).stream()                            .filter(file -> file.getName().endsWith(".dat"))                            .map(file -> file.getAbsolutePath())                            .collect(Collectors.toList()));                }                netMap.put("X5", listFiles);                File tanderDir = new File ("save/NKA/Тандер/" + sDateFrom + "-" + sDateTo);                if (tanderDir.exists()) {                    listFiles1.addAll(Arrays.asList(new File("save/NKA/Тандер/" + sDateFrom + "-" + sDateTo).listFiles()).stream()                            .filter(file -> file.getName().endsWith(".dat"))                            .map(file -> file.getAbsolutePath())                            .collect(Collectors.toList()));                }                netMap.put("Тандер", listFiles1);                break;            case 2:                listFiles.addAll(recursiveCountFiles(new File("save/2/" + sDateFrom + "-" + sDateTo + "/")));                for (String s : listFiles) {                    ArrayList<String> pathElements = new ArrayList<>(Arrays.asList(s.split("\\\\")));                    String rjkam = pathElements.get(pathElements.indexOf("save") + 3).replace("_", " ").trim();                    if (netMap.containsKey(rjkam)) {                        netMap.get(rjkam).add(s);                    } else {                        ArrayList<String> links = new ArrayList<>();                        links.add(s);                        netMap.put(rjkam, links);                    }                }                break;            case 3:                listFiles.addAll(Arrays.asList(new File("resource/" + sDateFrom + "-" + sDateTo).listFiles()).stream()                        .filter(file -> file.getName().endsWith(".dat"))                        .map(file -> file.getAbsolutePath())                        .collect(Collectors.toList()));                break;            case 4:                listFiles.addAll(Arrays.asList(new File("save/LKA/" + sDateFrom + "-" + sDateTo).listFiles()).stream()                        .filter(file -> file.getName().endsWith(".dat"))                        .map(file -> file.getAbsolutePath())                        .collect(Collectors.toList()));                netMap.put("LKA", listFiles);                break;        }        if (listFiles.size() == 0 && listFiles1.size() == 0) {            errorLabel.setText("По введенным данным сохранений нет");            return;        }        Task<Void> task = null;        switch (channelChoice.getSelectionModel().getSelectedIndex()) {            case 0:                task = createTaskForLkaDmp(listFiles);                break;            case 1:                task = createTaskForNkaMlka(netMap, mlkaSet, mlkaSet1);                break;            case 2:                task = createTaskForNkaDmp(netMap);                break;            case 3:                task = createTaskForNst(listFiles);                break;            case 4:                task = createTaskForLka(listFiles);        }        task.setOnSucceeded(event -> {            dialogStage.close();        });        progressBar.progressProperty().bind(task.progressProperty());        Thread thread = new Thread(task);        thread.start();    }    private Task<Void> createTaskForLkaDmp(List<String> regList) {        Task<Void> task = new Task<Void>() {            @Override            protected Void call() throws Exception {            int i = 0;            ApachePoiManager.createApachePoi(0);            ApachePoi apachePoi = ApachePoiManager.getInstance();            errorLabel.setVisible(false);            progressBar.setVisible(true);            apachePoi.setReportPath(reportPath);            List<DmpAddress> allAddresses = new ArrayList<>();            for (String regName : regList) {                try {                    BufferedReader reader = new BufferedReader(new FileReader(regName));                    JAXBContext context = JAXBContext.newInstance(DmpContainer.class, DmpAddress.class, Photo.class, DmpDescr.class);                    Unmarshaller unmarshaller = context.createUnmarshaller();                    DmpContainer container = (DmpContainer) unmarshaller.unmarshal(reader);                    allAddresses.addAll(container.getDmpAddresses());                    reader.close();                } catch (IOException | JAXBException e) {                    Logger.log(e.getMessage());                    e.printStackTrace();                }            }            Comparator<DmpAddress> regComp = (o1, o2) ->  {                return o1.getRegion().compareTo(o2.getRegion());            };            Comparator<DmpAddress> oblComp = (o1, o2) -> {                return o1.getObl().compareTo(o2.getObl());            };            Comparator<DmpAddress> channelComp = (o1, o2) -> {                return o1.getChannel().compareTo(o2.getChannel());            };            Comparator<DmpAddress> netComp = (o1, o2) -> {                return o1.getNet().compareTo(o2.getNet());            };            Comparator<DmpAddress> nameComp = (o1, o2) -> {                return o1.getName().compareTo(o2.getName());            };            Comparator<DmpAddress> addressComparator = regComp                    .thenComparing(oblComp)                    .thenComparing(channelComp)                    .thenComparing(netComp)                    .thenComparing(nameComp);            allAddresses.sort(addressComparator);            apachePoi.createReportFile(DateUtil.format(dateFrom.getValue()), DateUtil.format(dateTo.getValue()));            apachePoi.createConcreteSheet("LKA", null);            for (DmpAddress dmpAddress : allAddresses) {                if (dmpAddress.getDmpDescrList().size() == 0) {                    apachePoi.writeOneTtToConcreteSheet(new ArrayList(Arrays.asList(dmpAddress, null)));                } else {                    for (int j = 0; j < dmpAddress.getDmpDescrList().size(); j++) {                        apachePoi.writeOneTtToConcreteSheet(new ArrayList(Arrays.asList(dmpAddress, dmpAddress.getDmpDescrList().get(j))));                    }                }                updateProgress(++i, allAddresses.size());            }            apachePoi.calcSumRowConcreteSheet("LKA");            apachePoi.endWriting("LKA DMP");            progressBar.setVisible(false);            errorLabel.setVisible(true);            return null;            }        };        return task;    }    private Task<Void> createTaskForNkaMlka(Map<String, ArrayList<String>> netMap, Set<String> mlkaSet, Set<String> mlkaSet1) {        Task<Void> task = new Task<Void>() {            @Override            protected Void call() throws Exception {            int i = 0;            ApachePoiManager.createApachePoi(1);            ApachePoi apachePoi = ApachePoiManager.getInstance();            errorLabel.setVisible(false);            progressBar.setVisible(true);            apachePoi.setReportPath(reportPath);            Comparator<NkaAddress> regionComp = (o1, o2) -> {                return o1.getRegion().compareTo(o2.getRegion());            };            Comparator<NkaAddress> mlkaComp = (o1, o2) ->  {                return o1.getMlka().compareTo(o2.getMlka());            };            Comparator<NkaAddress> addrComp = (o1, o2) -> {                return o1.getAddress().compareTo(o2.getAddress());            };            Comparator<NkaAddress> addressComparator = regionComp                    .thenComparing(mlkaComp)                    .thenComparing(addrComp);            apachePoi.createReportFile(DateUtil.format(dateFrom.getValue()), DateUtil.format(dateTo.getValue()));            for (Map.Entry<String, ArrayList<String>> pair : netMap.entrySet()) {                //собираем файлы по всем регионам                if (pair.getValue().size() > 0) {                    List<NkaAddress> allAddresses = new ArrayList<>();                    for (String regName : pair.getValue()) {                        try {                            BufferedReader reader = new BufferedReader(new FileReader(regName));                            JAXBContext context = JAXBContext.newInstance(NkaContainer.class, NkaAddress.class, Photo.class, TMAActivity.class);                            Unmarshaller unmarshaller = context.createUnmarshaller();                            NkaContainer container = (NkaContainer) unmarshaller.unmarshal(reader);                            allAddresses.addAll(container.getNkaAddresses());                            reader.close();                        } catch (IOException | JAXBException e) {                            Logger.log(e.getMessage());                            e.printStackTrace();                        }                    }                    allAddresses.sort(addressComparator);                    apachePoi.createConcreteSheet(pair.getKey(), apachePoi.getTMAActivityFromFile(1, pair.getKey(), dateFrom.getValue(), dateTo.getValue()));                    for (NkaAddress nkaAddress : allAddresses) {                        apachePoi.writeOneTtToConcreteSheet(new ArrayList(Arrays.asList(pair.getKey(), nkaAddress)));                        updateProgress(++i, allAddresses.size());                    }                    apachePoi.calcSumRowConcreteSheet(pair.getKey());                    if (pair.getKey().equals("X5")) {                        mlkaSet.addAll(allAddresses.stream()                                .map(NkaAddress::getMlka)                                .distinct()                                .collect(Collectors.toSet()));                    } else {                        mlkaSet1.addAll(allAddresses.stream()                                .map(NkaAddress::getMlka)                                .distinct()                                .collect(Collectors.toSet()));                    }                    i = 0;                }            }            apachePoi.createTotalSheet(null);            if (netMap.get("X5").size() != 0) {                i = 0;                apachePoi.createTotalSheetHeader("X5");                for (String mlka : mlkaSet) {                    ArrayList<Object> parameters = new ArrayList<>();                    parameters.add(mlka);                    parameters.add("X5");                    apachePoi.writeOneTtToTotalSheet(parameters);                    updateProgress(++i, mlkaSet.size());                }                apachePoi.calcSumRowTotalSheet();            }            if (netMap.get("Тандер").size() != 0) {                i = 0;                apachePoi.createTotalSheetHeader("Тандер");                for (String mlka : mlkaSet1) {                    ArrayList<Object> parameters = new ArrayList<>();                    parameters.add(mlka);                    parameters.add("Тандер");                    apachePoi.writeOneTtToTotalSheet(parameters);                    updateProgress(++i, mlkaSet1.size());                }                apachePoi.calcSumRowTotalSheet();            }            apachePoi.endWriting("NKA MLKA");            progressBar.setVisible(false);            errorLabel.setVisible(true);            return null;            }        };        return task;    }    private Task<Void> createTaskForNkaDmp(Map<String, ArrayList<String>> rjkamMap) {        Task<Void> task = new Task<Void>() {            @Override            protected Void call() throws Exception {            int i = 0;            ApachePoiManager.createApachePoi(2);            ApachePoi apachePoi = ApachePoiManager.getInstance();            errorLabel.setVisible(false);            progressBar.setVisible(true);            apachePoi.setReportPath(reportPath);            apachePoi.createReportFile(DateUtil.format(dateFrom.getValue()), DateUtil.format(dateTo.getValue()));            for (Map.Entry<String, ArrayList<String>> pair : rjkamMap.entrySet()) {                if (pair.getValue().size() != 0) {                    apachePoi.createConcreteSheet(pair.getKey(), null);                    i = 0;                    for (String f : pair.getValue()) {                        BufferedReader reader = new BufferedReader(new FileReader(f));                        int clientId;                        String clientName;                        String clientAddress;                        String clientType;                        ArrayList<String> allPhotoList;                        int dmpNum;                        ArrayList<String[]> allDMPInClient = null;                        ArrayList<ArrayList<Boolean>> allDmpDescrs = null;                        ArrayList<String> allComments = new ArrayList<>();                        JAXBContext context = JAXBContext.newInstance(DmpAddressTT.class, Photo.class, DmpDescr.class);                        Unmarshaller unmarshaller = context.createUnmarshaller();                        DmpAddressTT dmpAddressTT = (DmpAddressTT) unmarshaller.unmarshal(reader);                        reader.close();                        clientId = dmpAddressTT.getId();                        clientName = dmpAddressTT.getName();                        clientAddress = dmpAddressTT.getAddress();                        clientType = dmpAddressTT.getTypeName();                        dmpNum = dmpAddressTT.getDmpDescrList().size();                        allDmpDescrs = new ArrayList<>();                        for (int j = 0; j < dmpNum; j++) {                            ArrayList<Boolean> dmpCriteria = new ArrayList<>();                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isCorrectPhoto());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isHasKeyWord());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdMZ());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdK());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdLP());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdS());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isMinSize());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isTmaProd());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isHasPrice());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isFilledOver80());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isPlaceDMP());                            allDmpDescrs.add(dmpCriteria);                            allComments.add(dmpAddressTT.getDmpDescrList().get(j).getComment());                        }                        allPhotoList = new ArrayList<>();                        for (Photo photo : dmpAddressTT.getPhotoList()) {                            allPhotoList.add(photo.getUrl().replace("thumb/", ""));                        }                        String[] pathElements = f.split("\\\\");                        int len = pathElements.length;                        String netName = pathElements[len - 2].replace("_", " ");                        for (int k = 0; k < dmpNum; k++) {                            ArrayList<Object> parameters = new ArrayList<>();                            parameters.add(netName);                            parameters.add(clientId);                            parameters.add(clientType);                            parameters.add(clientName);                            parameters.add(clientAddress);                            parameters.add(allComments.get(k));                            parameters.add(allPhotoList);                            parameters.add(allDmpDescrs.get(k));                            apachePoi.writeOneTtToConcreteSheet(parameters);                        }                        updateProgress(++i, pair.getValue().size());                    }                    apachePoi.calcSumRowConcreteSheet(pair.getKey());                }            }            apachePoi.createTotalSheet(null);            apachePoi.createTotalSheetHeader(null);            for (Map.Entry<String, ArrayList<String>> pair : rjkamMap.entrySet()) {                i = 0;                if (pair.getValue().size() != 0) {                    for (String f : pair.getValue()) {                        BufferedReader reader = new BufferedReader(new FileReader(f));                        int clientId;                        String clientName;                        String clientAddress;                        String clientType;                        ArrayList<String> allPhotoList;                        int dmpNum;                        ArrayList<String[]> allDMPInClient = null;                        ArrayList<ArrayList<Boolean>> allDmpDescrs = null;                        ArrayList<String> allComments = new ArrayList<>();                        JAXBContext context = JAXBContext.newInstance(DmpAddressTT.class, Photo.class, DmpDescr.class);                        Unmarshaller unmarshaller = context.createUnmarshaller();                        DmpAddressTT dmpAddressTT = (DmpAddressTT) unmarshaller.unmarshal(reader);                        reader.close();                        clientId = dmpAddressTT.getId();                        clientName = dmpAddressTT.getName();                        clientAddress = dmpAddressTT.getAddress();                        clientType = dmpAddressTT.getTypeName();                        dmpNum = dmpAddressTT.getDmpDescrList().size();                        allDmpDescrs = new ArrayList<>();                        for (int j = 0; j < dmpNum; j++) {                            ArrayList<Boolean> dmpCriteria = new ArrayList<>();                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isCorrectPhoto());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isHasKeyWord());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdMZ());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdK());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdLP());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isProdS());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isMinSize());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isTmaProd());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isHasPrice());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isFilledOver80());                            dmpCriteria.add(dmpAddressTT.getDmpDescrList().get(j).isPlaceDMP());                            allDmpDescrs.add(dmpCriteria);                            allComments.add(dmpAddressTT.getDmpDescrList().get(j).getComment());                        }                        allPhotoList = new ArrayList<>();                        for (Photo photo : dmpAddressTT.getPhotoList()) {                            allPhotoList.add(photo.getUrl().replace("thumb/", ""));                        }                        String[] pathElements = f.split("\\\\");                        int len = pathElements.length;                        String netName = pathElements[len - 2].replace("_", " ");                        for (int k = 0; k < dmpNum; k++) {                            ArrayList<Object> parameters = new ArrayList<>();                            parameters.add(pair.getKey());                            parameters.add(netName);                            parameters.add(clientId);                            parameters.add(clientType);                            parameters.add(clientName);                            parameters.add(clientAddress);                            parameters.add(allComments.get(k));                            parameters.add(allPhotoList);                            parameters.add(allDmpDescrs.get(k));                            apachePoi.writeOneTtToTotalSheet(parameters);                        }                        updateProgress(++i, pair.getValue().size());                    }                }            }            apachePoi.calcSumRowTotalSheet();            apachePoi.endWriting("NKA DMP");            progressBar.setVisible(false);            errorLabel.setVisible(true);            return null;            }        };        return task;    }    private Task<Void> createTaskForNst(List<String> oblRepPaths) {        Task<Void> task = new Task<Void>() {            @Override            protected Void call() throws Exception {                int i = 0;                ApachePoiManager.createApachePoi(3);                ApachePoi apachePoi = ApachePoiManager.getInstance();                errorLabel.setVisible(false);                progressBar.setVisible(true);                apachePoi.setReportPath(reportPath);                List<NstAddress> allAddresses = new ArrayList<>();                for (String oblPath : oblRepPaths) {                    try {                        BufferedReader reader = new BufferedReader(new FileReader(oblPath));                        JAXBContext context = JAXBContext.newInstance(NstContainer.class, NstAddress.class, NstPhoto.class, TMAActivity.class);                        Unmarshaller unmarshaller = context.createUnmarshaller();                        NstContainer container = (NstContainer) unmarshaller.unmarshal(reader);                        allAddresses.addAll(container.getNstAddresses());                        reader.close();                    } catch (IOException | JAXBException e) {                        Logger.log(e.getMessage());                        e.printStackTrace();                    }                }                Comparator<NstAddress> oblComparator = new Comparator<NstAddress>() {                    @Override                    public int compare(NstAddress o1, NstAddress o2) {                        return o1.getObl().compareTo(o2.getObl());                    }                };                Comparator<NstAddress> shopComparator = new Comparator<NstAddress>() {                    @Override                    public int compare(NstAddress o1, NstAddress o2) {                        return o1.getName().compareTo(o2.getName());                    }                };                Comparator<NstAddress> addressComparator = oblComparator.thenComparing(shopComparator);                allAddresses.sort(addressComparator);                apachePoi.createReportFile(DateUtil.format(dateFrom.getValue()), DateUtil.format(dateTo.getValue()));                apachePoi.createConcreteSheet("ММ", apachePoi.getTMAActivityFromFile(3, "Тандер", dateFrom.getValue(), dateTo.getValue()));                for (NstAddress nstAddress : allAddresses) {                    ArrayList<Boolean> photosList = new ArrayList<>();                    photosList.add(nstAddress.isHavePhotoMZ());                    photosList.add(nstAddress.isBordersPhotoMZ());                    photosList.add(nstAddress.isVertPhotoMZ());                    photosList.add(nstAddress.is_30PhotoMZ());                    photosList.add(nstAddress.isCenterPhotoMZ());                    photosList.add(nstAddress.isHavePhotoKS());                    photosList.add(nstAddress.isBordersPhotoKS());                    photosList.add(nstAddress.isVertPhotoKS());                    photosList.add(nstAddress.is_30PhotoKS());                    photosList.add(nstAddress.isCenterPhotoKS());                    photosList.add(nstAddress.isHavePhotoM());                    photosList.add(nstAddress.isBordersPhotoM());                    photosList.add(nstAddress.isVertPhotoM());                    photosList.add(nstAddress.isCenterPhotoM());                    photosList.add(nstAddress.isNoMatrixMZ());                    photosList.add(nstAddress.isNoMatrixKS());                    photosList.add(nstAddress.isNoMatrixM());                    String commentMZ = nstAddress.getCommentMZ();                    String commentKS = nstAddress.getCommentKS();                    String commentM = nstAddress.getCommentM();                    List<TMAActivity> activities = nstAddress.getTmaActivityList();                    ArrayList<Object> parameters = new ArrayList<>();                    parameters.add("АО \"Тандер\"");                    parameters.add(nstAddress.getObl());                    parameters.add(nstAddress.getCity());                    parameters.add(nstAddress.getName());                    parameters.add(nstAddress.isHasPhotos());                    parameters.add(commentMZ);                    parameters.add(commentKS);                    parameters.add(commentM);                    parameters.add(photosList);                    parameters.add(activities);                    parameters.add(nstAddress.getChecked());                    parameters.add(nstAddress.getSavedDate());                    parameters.add(nstAddress.getVisitCount());                    apachePoi.writeOneTtToConcreteSheet(parameters);                    updateProgress(++i, allAddresses.size());                }                apachePoi.calcSumRowConcreteSheet("АО \"Тандер\"");                apachePoi.endWriting("NST");                progressBar.setVisible(false);                errorLabel.setVisible(true);                return null;            }        };        return task;    }    private Task<Void> createTaskForLka(List<String> oblRepPaths) {        Task<Void> task = new Task<Void>() {            @Override            protected Void call() throws Exception {            int i = 0;            ApachePoiManager.createApachePoi(4);            ApachePoi apachePoi = ApachePoiManager.getInstance();            errorLabel.setVisible(false);            progressBar.setVisible(true);            apachePoi.setReportPath(reportPath);            Comparator<LkaAddress> regionComp = (o1, o2) -> {                return o1.getRegion().compareTo(o2.getRegion());            };            Comparator<LkaAddress> oblComp = (o1, o2) -> {                return o1.getObl().compareTo(o2.getObl());            };            Comparator<LkaAddress> lkaComp = (o1, o2) ->  {                return o1.getLka().compareTo(o2.getLka());            };            Comparator<LkaAddress> addrComp = (o1, o2) -> {                return o1.getAddress().compareTo(o2.getAddress());            };            Comparator<LkaAddress> addressComparator = regionComp                    .thenComparing(oblComp)                    .thenComparing(lkaComp)                    .thenComparing(addrComp);            apachePoi.createReportFile(DateUtil.format(dateFrom.getValue()), DateUtil.format(dateTo.getValue()));            List<LkaAddress> allAddresses = new ArrayList<>();            for (String regName : oblRepPaths) {                try {                    BufferedReader reader = new BufferedReader(new FileReader(regName));                    JAXBContext context = JAXBContext.newInstance(LkaContainer.class, LkaAddress.class, Photo.class, TMAActivity.class);                    Unmarshaller unmarshaller = context.createUnmarshaller();                    LkaContainer container = (LkaContainer) unmarshaller.unmarshal(reader);                    allAddresses.addAll(container.getLkaAddresses());                    reader.close();                } catch (IOException | JAXBException e) {                    Logger.log(e.getMessage());                    e.printStackTrace();                }            }            allAddresses.sort(addressComparator);            apachePoi.createConcreteSheet("LKA", apachePoi.getTMAActivityFromFile(4, null, dateFrom.getValue(), dateTo.getValue()));            for (LkaAddress lkaAddress : allAddresses) {                apachePoi.writeOneTtToConcreteSheet(new ArrayList(Arrays.asList(lkaAddress)));                updateProgress(++i, allAddresses.size());            }            apachePoi.calcSumRowConcreteSheet("LKA");            apachePoi.endWriting("LKA");            progressBar.setVisible(false);            errorLabel.setVisible(true);            return null;            }        };        return task;    }    private ArrayList recursiveCountFiles(File path) {        if (!path.exists()) return new ArrayList();        ArrayList<String> filesInThisFolder = new ArrayList<>();        for (File file : path.listFiles()) {            if (!file.exists()) {                return new ArrayList();            } else if (file.isDirectory()) {                filesInThisFolder.addAll(recursiveCountFiles(file));            } else {                filesInThisFolder.add(file.getAbsolutePath());            }        }        return filesInThisFolder;    }}